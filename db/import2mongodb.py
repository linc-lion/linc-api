#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Define a path that we can find the Monguo models
import sys
sys.path.append('../app/models')
sys.path.append('../app/handlers')
from os.path import realpath,dirname
from json import loads
from tornado.web import asynchronous
from tornado.gen import engine,coroutine
#from monguo.connection import Connection as con
from datetime import datetime

# Import base handler class
from handlers.base import BaseHandler

# Import models
from organization import Organization
from user import User
#from animal import Animal, animal as specie

jsonpath = realpath(dirname(__file__))+'/pg_exported2json/'

files = ['organizations.json',
         'users.json',
         'lions.json',
         'admin_users.json',
         'active_admin_comments.json', 'cv_requests.json',
         'images.json',
         'cv_results.json', 'image_sets.json',
         'schema_migrations.json']

def readData(filename):
    # read data from json file
    f = open(filename)
    data = f.readlines()
    f.close()

    # Cleaning lines generated by psql
    data = data[2:-2]

    # Loading JSON structures to Python structures
    for n,d in enumerate(data):
        data[n] = loads(d)

    return data

class ImportHandler(BaseHandler):
    def prepare(self):
        #self.db = con.connect('linc-api-'+specie)
        pass

    @asynchronous
    @coroutine
    def post(self):
        response = {'messages':list()}
        for fn in files:
            data = readData(jsonpath+fn)
            if fn == 'organizations.json':
                for d in data:
                    obj = dict(d)
                    obj['iid'] = obj['id']
                    del obj['id']
                    obj['created_at'] = datetime.strptime(obj['created_at'], '%Y-%m-%d %H:%M:%S.%f')
                    obj['updated_at'] = datetime.strptime(obj['updated_at'], '%Y-%m-%d %H:%M:%S.%f')
                    try:
                        newobj = yield Organization(**obj).save()
                    except:
                        print('Fail to import organizations')
                        break
                    #result = yield newobj.save()
                    #print(str(result))
                response['messages'].append('organizations imported')
            elif fn == 'lions.json':
                for d in data:
                    obj = dict(d)
                    print('\n\n'+str(obj))
                response['messages'].append('lions imported')
            elif fn in ['users.json','admin_users.json']:
                for d in data:
                    obj = dict(d)
                    # Get organization_id object
                    try:
                        orgobj = yield Organization.objects.limit(1).filter(iid=obj['organization_id']).find_all()
                    except:
                        orgobj = None
                    obj['iid'] = obj['id']
                    del obj['id']
                    if orgobj:
                        obj['organization_id'] = orgobj[0]._id
                    else:
                        obj['organization_id'] = orgobj
                    obj['last_sign_in_at'] = datetime.strptime(obj['last_sign_in_at'], '%Y-%m-%d %H:%M:%S.%f')
                    obj['updated_at'] = datetime.strptime(obj['updated_at'], '%Y-%m-%d %H:%M:%S.%f')
                    obj['created_at'] = datetime.strptime(obj['created_at'], '%Y-%m-%d %H:%M:%S.%f')
                    obj['current_sign_in_at'] = datetime.strptime(obj['current_sign_in_at'], '%Y-%m-%d %H:%M:%S.%f')
                    obj['trashed'] = False
                    obj['reset_password_sent_at'] = datetime.now()
                    obj['authentication_token'] = ''
                    obj['admin'] = (fn == 'admin_users.json')
                    if True:
                        newobj = yield User(**obj).save()
                        print('\n Insert OK: '+fn)
                    else:
                        print('Fail to import users')
                        break
                if fn == 'admin_users.json':
                    response['messages'].append('users imported')
                else:
                    response['messages'].append('users imported')
            elif fn == 'other':
                for d in data:
                    obj = dict(d)

        self.finish(response)
